// __BEGIN_LICENSE__
//  Copyright (c) 2006-2013, United States Government as represented by the
//  Administrator of the National Aeronautics and Space Administration. All
//  rights reserved.
//
//  The NASA Vision Workbench is licensed under the Apache License,
//  Version 2.0 (the "License"); you may not use this file except in
//  compliance with the License. You may obtain a copy of the License at
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
// __END_LICENSE__


#include <istream>

#include <cxxtest/TestSuite.h>
#include <vw/Image.h>
#include <vw/Math.h>

#include <vw/GPU.h>

using namespace std;
using namespace vw;
using namespace GPU;

inline void Nothing() { }

//#undef VW_HAVE_PKG_CG

//#################################################################################################################
//                                 Free Functions: PrintProfileResult & PrintProfileHeader
//#################################################################################################################

// Static variables control formatting behavior
  static int format_margin = 4;
  static int format_name_column_width = 25;
  static int format_column_space = 3;
  static int format_time_precision = 4;
  static int format_time_int_digits = 3;

  static int format_factor_precision = 2;
  static int format_factor_int_digits = 6;


static void PrintProfileResult(const char* name, float time_cpu,
			       float time_gpu1_cg, float time_gpu2_cg, ShaderCompilationStatusEnum comp_status_cg,
			       float time_gpu1_glsl, float time_gpu2_glsl, ShaderCompilationStatusEnum comp_status_glsl,
			       float dif_cg, float dif_glsl) {
  cout.unsetf(ios::floatfield); cout.setf(ios::floatfield, ios::fixed);
  cout.fill(' ');
  // Margin and Name
  cout.unsetf(ios::adjustfield); cout.setf(ios::adjustfield, ios::left);
  cout.width(format_margin);  cout << " ";
  cout.width(format_name_column_width); cout << name;
  if(strlen(name) > format_name_column_width) {
    printf("\n");
    cout.width(format_margin + format_name_column_width);  cout << " ";
  }
  // Statistics
  cout.unsetf(ios::adjustfield); cout.setf(ios::adjustfield, ios::right);
  // CPU
  cout.precision(format_time_precision);
  cout.width(format_time_precision + format_time_int_digits + format_column_space); cout << time_cpu;

  cout << " | ";
  // GPU - cg
#ifdef VW_HAVE_PKG_CG
  if(comp_status_cg == SHADER_COMPILATION_STATUS_SUCCESS_FILE || comp_status_cg == SHADER_COMPILATION_STATUS_SUCCESS_CACHE) {
    cout.precision(format_time_precision);
    cout.width(format_time_precision + format_time_int_digits + format_column_space); cout << time_gpu2_cg;

    cout.precision(format_time_precision);
    cout.width(format_factor_precision + format_factor_int_digits + format_column_space); cout << time_cpu / time_gpu2_cg;

    cout.precision(format_time_precision);
    cout.width(format_time_precision + format_time_int_digits + format_column_space); cout << time_gpu1_cg - time_gpu2_cg;
  }
  else {
    int total_width = 2*format_time_precision + format_time_precision + 2*format_time_int_digits + format_factor_int_digits + 3*format_column_space - 2;
    if(comp_status_cg == SHADER_COMPILATION_STATUS_ERROR_FILE) {
      cout.width(total_width); cout << "  << File Error >>";
    }
    if(comp_status_cg == SHADER_COMPILATION_STATUS_ERROR_COMPILE) {
      cout.width(total_width); cout << "  << Compile Error >>";
    }
    else if(comp_status_cg == SHADER_COMPILATION_STATUS_ERROR_LINK) {
      cout.width(total_width); cout << "<< Link Error >>";
    }
  }
  cout << " | ";
#endif
  // GPU - glsl
  if(comp_status_glsl == SHADER_COMPILATION_STATUS_SUCCESS_FILE || comp_status_glsl == SHADER_COMPILATION_STATUS_SUCCESS_CACHE) {
    cout.precision(format_time_precision);
    cout.width(format_time_precision + format_time_int_digits + format_column_space); cout << time_gpu2_glsl;

    cout.precision(format_time_precision);
    cout.width(format_factor_precision + format_factor_int_digits + format_column_space); cout << time_cpu / time_gpu2_glsl;

    cout.precision(format_time_precision);
    cout.width(format_time_precision + format_time_int_digits + format_column_space); cout << time_gpu1_glsl - time_gpu2_glsl;
  }
  else {
    int total_width = 2*format_time_precision + format_time_precision + 2*format_time_int_digits + format_factor_int_digits + 3*format_column_space - 2;
    if(comp_status_glsl == SHADER_COMPILATION_STATUS_ERROR_FILE) {
      cout.width(total_width); cout << "  << File Error >>";
    }
    if(comp_status_glsl == SHADER_COMPILATION_STATUS_ERROR_COMPILE) {
      cout.width(total_width); cout << "  << Compile Error >>";
    }
    else if(comp_status_glsl == SHADER_COMPILATION_STATUS_ERROR_LINK) {
      cout.width(total_width); cout << "  << Link Error >>";
    }

  }
  cout << " | ";
  // Difs
  /*
    cout.precision(2);
    cout.width(format_factor_precision + format_factor_int_digits + format_column_space); cout << dif_cg;
    cout.width(format_factor_precision + format_factor_int_digits + format_column_space); cout << dif_glsl;
  */
  cout << endl;
}

static void PrintProfileHeader() {
  // LINE1
  // Margin and Name
  cout.unsetf(ios::adjustfield); cout.setf(ios::adjustfield, ios::left);
  cout.width(format_margin);  cout << " ";
  cout.width(format_name_column_width); cout << "Function Name";
  // CPU
  cout.width(format_time_precision + format_time_int_digits + format_column_space); cout << "CPU";
  cout << " | ";
  // GPU - cg
#ifdef VW_HAVE_PKG_CG
  cout.precision(format_time_precision);
  cout.width(format_time_precision + format_time_int_digits + format_column_space); cout << "GPU: cg";

  cout.precision(format_time_precision);
  cout.width(format_factor_precision + format_factor_int_digits + format_column_space); cout << " ";

  cout.precision(format_time_precision);
  cout.width(format_time_precision + format_time_int_digits + format_column_space); cout << " ";;
  cout << " | ";
#endif
  // GPU - glsl
  cout.precision(format_time_precision);
  cout.width(format_time_precision + format_time_int_digits + format_column_space); cout << "GPU: glsl";

  cout.precision(format_time_precision);
  cout.width(format_factor_precision + format_factor_int_digits + format_column_space); cout << " ";

  cout.precision(format_time_precision);
  cout.width(format_time_precision + format_time_int_digits + format_column_space); cout << " ";;
  // Line 2
  cout << "\n";
  cout.width(format_margin + format_name_column_width);  cout << " ";
  // CPU
  cout.width(format_time_precision + format_time_int_digits + format_column_space); cout << "Exec";
  cout << " | ";
  // GPU - cg
#ifdef VW_HAVE_PKG_CG
  cout.precision(format_time_precision);
  cout.width(format_time_precision + format_time_int_digits + format_column_space); cout << "Exec";

  cout.precision(format_time_precision);
  cout.width(format_factor_precision + format_factor_int_digits + format_column_space); cout << "Ratio";

  cout.precision(format_time_precision);
  cout.width(format_time_precision + format_time_int_digits + format_column_space); cout << "Comp";
  cout << " | ";
#endif
  // GPU - glsl
  cout.precision(format_factor_precision);
  cout.width(format_time_precision + format_time_int_digits + format_column_space); cout << "Exec";

  cout.precision(format_time_precision);
  cout.width(format_factor_precision + format_factor_int_digits + format_column_space); cout << "Ratio";

  cout.precision(format_time_precision);
  cout.width(format_time_precision + format_time_int_digits + format_column_space); cout << "Comp";;

  cout << endl;
}

#ifdef VW_HAVE_PKG_CG
static bool have_pkg_cg = true;
#else
static bool have_pkg_cg = false;
#endif

//#################################################################################################################
//                                               Macro: PROFILE_FUNCTION
//#################################################################################################################


#define PROFILE_FUNCTION(GPU, CPU, TEXT) {  \
 UtilityTimer timer; \
 float time_cpu=0, time_gpu1_cg=0, time_gpu2_cg=0, time_gpu1_glsl=0, time_gpu2_glsl=0, dif_cg =0, dif_glsl = 0;  \
 ShaderCompilationStatusEnum comp_status_cg, comp_status_glsl; \
 timer.Start(); CPU; timer.Stop(); time_cpu = timer.ElapsedSeconds();  \
 if(have_pkg_cg) { \
 try { \
       set_shader_language_choice(SHADER_LANGUAGE_CHOICE_CG); timer.Start(); GPU; \
       glFinish(); timer.Stop(); time_gpu1_cg = timer.ElapsedSeconds();  \
       set_shader_language_choice(SHADER_LANGUAGE_CHOICE_CG); timer.Start(); GPU; \
       glFinish(); timer.Stop(); time_gpu2_cg = timer.ElapsedSeconds();  \
 } catch(...) { } \
 comp_status_cg = get_shader_compilation_status(); \
 if(save_base_path) { string path = save_base_path; path += "_CG_"; path += TEXT; path += ".jpg"; write_image(path.c_str(), result_tex); } \
 if(0) result_tex.write_image_view(working_img);     									\
 /*if(false && working_img.rows() == result_img.rows() && working_img.rows() == result_img.rows()) */  \
 /*   dif_cg = working_img.rows() * working_img.cols() * mean_channel_value(abs(working_img - result_img)); else dif_cg = -1.0; */ \
 } \
 try { \
       set_shader_language_choice(SHADER_LANGUAGE_CHOICE_GLSL); timer.Start(); GPU; \
       glFinish(); timer.Stop(); time_gpu1_glsl = timer.ElapsedSeconds();  \
       set_shader_language_choice(SHADER_LANGUAGE_CHOICE_GLSL); timer.Start(); GPU; \
       glFinish(); timer.Stop(); time_gpu2_glsl = timer.ElapsedSeconds();  \
 } catch(...) { } \
 comp_status_glsl = get_shader_compilation_status(); \
 if(save_base_path) { string path = save_base_path; path += "_CG_"; path += TEXT; path += ".jpg"; write_image(path.c_str(), result_tex); } \
 if(0) result_tex.write_image_view(working_img);                           \
 /* if(false && working_img.rows() == result_img.rows() && working_img.rows() == result_img.rows()) */  \
 /*   dif_glsl = working_img.rows() * working_img.cols() * mean_channel_value(abs(working_img - result_img)); else dif_glsl = -1.0; */ \
 PrintProfileResult(TEXT, time_cpu, time_gpu1_cg, time_gpu2_cg, comp_status_cg, \
		    time_gpu1_glsl, time_gpu2_glsl, comp_status_glsl, dif_cg, dif_glsl); \
}


//#################################################################################################################
//                                              Custom Shader Definitions
//#################################################################################################################

GENERIC_FRAGMENT_SHADER_FUNCTION_1i3f(expression1, f1, f2, f3, "User/expression1-1i3f")

GENERIC_FRAGMENT_SHADER_FUNCTION_1i2f(transform_sine_wave, period, amplitude, "User/transform-sine-1i2f")

//#################################################################################################################
//                                            Profile Function
//#################################################################################################################

  template <class PixelT>
  void profile_functions(char* save_base_path = NULL) {
  // *********** Profile PixelRGB<float> *******************
  typedef typename TexTraitsForPixelT<PixelT>::imageview_t PixelT_CPU;
  //PixelT pixel_gpu;
  PixelT_CPU pixel_cpu;

  GPUImage<PixelT> tex;
  read_image(tex, "tests/test_images/lighthouse-1000x1000.png");
  ImageView<PixelT_CPU> img;
  read_image(img, "tests/test_images/lighthouse-1000x1000.png");
  ImageView<PixelT_CPU> img_out(img.cols(), img.rows());

  printf("--- Image Size = %i x %i ---\n", img.cols(), img.rows());

  GPUImage<PixelT> result_tex(img.cols(), img.rows());
  ImageView<PixelT_CPU>  result_img(img.cols(), img.rows());
  ImageView<PixelT_CPU> working_img;

  PrintProfileHeader();
  // ImageAlgorithms
  ImageView<PixelRGB<float> > img2(1, 1);
  img2(1, 1) = PixelRGB<float>(1, 1, 1);
  img2 = acos(img2);
  PROFILE_FUNCTION(result_tex = acos(tex), result_img = acos(img), "acos(img)");


  printf(" *** ImageAlgorithms:\n");

  PROFILE_FUNCTION(result_tex = copy(tex), result_img = copy(img), "copy(img)");
  PROFILE_FUNCTION(result_tex = clamp(tex, 0.4, 0.6), result_img = clamp(img, 0.4, 0.6), "clamp(img, 0.4, 0.6)");
  PROFILE_FUNCTION(result_tex = threshold(tex, 0.5, 0, 1), result_img = threshold(img, 0.5, 0, 1), "threshold(img, 0.5, 0, 1)");
  PROFILE_FUNCTION(result_tex = normalize(tex, 0, 1), result_img = normalize(img, 0, 1), "normalize(img, 0, 1)");
  PROFILE_FUNCTION(fill(result_tex, 1, 0, 0, 1), fill(result_img, pixel_cpu), "fill(img, 1, 0, 0, 1)");
// ImageMath
  printf(" *** ImageMath:\n");
  //PROFILE_FUNCTION(result_tex = abs(tex), result_img = abs(img), "abs(img)");
  PROFILE_FUNCTION(result_tex = acos(tex), result_img = acos(img), "acos(img)");
    PROFILE_FUNCTION(result_tex = acosh(tex), result_img = acosh(img), "acosh(img)");
    PROFILE_FUNCTION(result_tex = asin(tex), result_img = asin(img), "asin(img)");
    PROFILE_FUNCTION(result_tex = asinh(tex), result_img = asinh(img), "asinh(img)");
    PROFILE_FUNCTION(result_tex = atan(tex), result_img = atan(img), "atan(img)");
    PROFILE_FUNCTION(result_tex = atanh(tex), result_img = atanh(img), "atanh(img)");
    PROFILE_FUNCTION(result_tex = cbrt(tex), result_img = cbrt(img), "cbrt(img)");
    PROFILE_FUNCTION(result_tex = ceil(tex), result_img = ceil(img), "ceil(img)");
    PROFILE_FUNCTION(result_tex = cos(tex), result_img = cos(img), "cos(img)");
    PROFILE_FUNCTION(result_tex = cosh(tex), result_img = cosh(img), "cosh(img)");
    PROFILE_FUNCTION(result_tex = exp(tex), result_img = exp(img), "exp(img)");
    PROFILE_FUNCTION(result_tex = exp2(tex), result_img = exp2(img), "exp2(img)");
    PROFILE_FUNCTION(result_tex = expm1(tex), result_img = expm1(img), "expm1(img)");
    PROFILE_FUNCTION(result_tex = floor(tex), result_img = floor(img), "floor(img)");
    PROFILE_FUNCTION(result_tex = log(tex), result_img = log(img), "log(img)");
    PROFILE_FUNCTION(result_tex = log10(tex), result_img = log10(img), "log10(img)");
    PROFILE_FUNCTION(result_tex = log1p(tex), result_img = log1p(img), "log1p(img)");
    PROFILE_FUNCTION(result_tex = round(tex), result_img = round(img), "round(img)");
    PROFILE_FUNCTION(result_tex = sin(tex), result_img = sin(img), "sin(img)");
    PROFILE_FUNCTION(result_tex = sinh(tex), result_img = sinh(img), "sinh(img)");
    PROFILE_FUNCTION(result_tex = sqrt(tex), result_img = sqrt(img), "sqrt(img)");
    PROFILE_FUNCTION(result_tex = tan(tex), result_img = tan(img), "tan(img)");
    PROFILE_FUNCTION(result_tex = tanh(tex), result_img = tanh(img), "tanh(img)");
    PROFILE_FUNCTION(result_tex = trunc(tex), result_img = trunc(img), "trunc(img)");

    PROFILE_FUNCTION(result_tex = atan2(tex, 1.0), result_img = atan2(img, 1.0), "atan2(img, 1.0)");
    PROFILE_FUNCTION(result_tex = atan2(1.0, tex), result_img = atan2(1.0, img), "atan2(1.0, img)");
    PROFILE_FUNCTION(result_tex = atan2(tex, tex), result_img = atan2(img, img), "atan2(img, img)");

    PROFILE_FUNCTION(result_tex = copysign(tex, 1.0), result_img = copysign(img, 1.0), "copysign(img, 1.0)");
    PROFILE_FUNCTION(result_tex = copysign(1.0, tex)  , result_img = copysign(1.0, img), "copysign(1.0, img)");
    PROFILE_FUNCTION(result_tex = copysign(tex, tex), result_img = copysign(img, img), "copysign(img, img)");

    PROFILE_FUNCTION(result_tex = fdim(tex, 1.0), result_img = fdim(img, 1.0), "fdim(img, 1.0)");
    PROFILE_FUNCTION(result_tex = fdim(1.0, tex), result_img = fdim(1.0, img), "fdim(1.0, img)");
    PROFILE_FUNCTION(result_tex = fdim(tex, tex), result_img = fdim(img, img), "fdim(img, img)");

    PROFILE_FUNCTION(result_tex = hypot(tex, 1.0), result_img = hypot(img, 1.0), "hypot(img, 1.0)");
    PROFILE_FUNCTION(result_tex = hypot(1.0, tex), result_img = hypot(1.0, img), "hypot(1.0, img)");
    PROFILE_FUNCTION(result_tex = hypot(tex, tex), result_img = hypot(img, img), "hypot(img, img)");

    PROFILE_FUNCTION(result_tex = pow(tex, 2.0),result_img = pow(img, 2.0), "pow(img, 2.0)");
    PROFILE_FUNCTION(result_tex = pow(2.0, tex),result_img = pow(2.0, img), "pow(2.0, img)");
    PROFILE_FUNCTION(result_tex = pow(tex, tex),result_img = pow(img, img), "pow(img, img)");

 // ImageOperators
    printf(" *** ImageOperators:\n");
    //PROFILE_FUNCTION(result_tex = tex + 0.1, result_img = img + pixel_cpu, "img + PixelT(0.5 ...)");
    //PROFILE_FUNCTION(result_tex = tex - 0.1, result_img = img - pixel_cpu, "img - PixelT(0.5 ...)");
    // PROFILE_FUNCTION(result_tex = tex * 0.9, result_img = img * pixel, "img * PixelT(0.5 ...)");
    // PROFILE_FUNCTION(result_tex = tex / 1.5, result_img = img / pixel, "img / PixelT(0.5 ...)");
    PROFILE_FUNCTION(result_tex = tex + tex, result_img = img + img, "img + img");
    PROFILE_FUNCTION(result_tex = tex - tex, result_img = img - img, "img - img");
    //  PROFILE_FUNCTION(result_tex = tex * tex, result_img = img * img, "img * img");
    // PROFILE_FUNCTION(result_tex = tex / tex, result_img = img / img, "img / img");
 // ImageStatistics
    printf(" *** ImageStatistics:\n");
    PROFILE_FUNCTION(min_channel_value(tex), min_channel_value(img), "min_channel_value(img)");
    PROFILE_FUNCTION(max_channel_value(tex), max_channel_value(img), "max_channel_value(img)");
    PROFILE_FUNCTION(mean_channel_value(tex), mean_channel_value(img), "mean_channel_value(img)");
 // Filter
    printf(" *** Filter:\n");
    PROFILE_FUNCTION(result_tex = gaussian_filter(tex, 0.2, 0.2), result_img = gaussian_filter(img, 0.2, 0.2), "gaussian_filter(img, 0.2, 0.2)");
    PROFILE_FUNCTION(result_tex = gaussian_filter(tex, 0.75, 0.75), result_img = gaussian_filter(img, 0.75, 0.75), "gaussian_filter(img, 0.75, 0.75)");
    //PROFILE_FUNCTION(result_tex = gaussian_derivative_filter(tex, 2.0, 2.0, 2.0, 2.0, 1.5, 5),
    //		     result_img = gaussian_derivative_filter(img, 2.0, 2.0, 2.0, 2.0, 1.5, 5),
    //		     "gaussian_derivative_filter(img, 2.0, 2.0, 2.0, 2.0, 1.5, 5)");
    PROFILE_FUNCTION(result_tex = laplacian_filter(tex),
		     laplacian_filter(img),
		     "laplacian_filter(img)");
 // Manipulation
    printf(" *** Manipulation:\n");
    // PROFILE_FUNCTION(result_tex = crop(tex), crop(img), "crop(img)");
    PROFILE_FUNCTION(result_tex = flip_horizontal(tex), result_img = flip_horizontal(img), "flip_horizontal(img)");
    PROFILE_FUNCTION(result_tex = flip_vertical(tex), result_img = flip_vertical(img), "flip_vertical(img)");
    PROFILE_FUNCTION(result_tex = rotate_180(tex), result_img = rotate_180(img), "rotate_180(img)");
    //  PROFILE_FUNCTION(result_tex = rotate_90_ccw(tex), result_img = rotate_90_ccw(img), "rotate_90_ccw(img)");
    // PROFILE_FUNCTION(result_tex = rotate_90_cw(tex), result_img = rotate_90_cw(img), "rotate_90_cw(img)");
    // PROFILE_FUNCTION(result_tex = subsample(tex, 2, 2), result_img = subsample(img, 2, 2), "subsample(img, 2, 2)");
    // PROFILE_FUNCTION(result_tex = transpose(tex), result_img = transpose(img), "transpose(img)");
 // Transform
	/*
    printf(" *** Transform:\n");
    PROFILE_FUNCTION(result_tex = free_rotate(tex, 2.0);, result_img = free_rotate(img, 2.0), "free_rotate(img, 2.0)");
    PROFILE_FUNCTION(result_tex = translate(tex, 10, 10), result_img = translate(img, 10, 10), "translate(img, 10, 10)");
    PROFILE_FUNCTION(result_tex = resample(tex, 1.1, 1.1, tex.width() * 1.1, tex.height() * 1.1, NearestPixelInterpolation(), ZeroEdgeExtend()),
		     result_img = resample(img, 1.1, 1.1, tex.width() * 1.1, tex.height() * 1.1, NearestPixelInterpolation(), ZeroEdgeExtend()),
		     "resample(tex, 1.1, 1.1, tex.width() * 1.1, tex.height() * 1.1, interpolation::NearestPixel(), ZeroEdgeExtend())");

    PROFILE_FUNCTION(result_tex = resample(tex, 1.1, 1.1, tex.width() * 1.1, tex.height() * 1.1, BilinearInterpolation(), ZeroEdgeExtend()),
		     result_img = resample(img, 1.1, 1.1, tex.width() * 1.1, tex.height() * 1.1, BilinearInterpolation(), ZeroEdgeExtend()),
		     "resample(tex, 1.1, 1.1, tex.width() * 1.1, tex.height() * 1.1, interpolation::Bilinear(), ZeroEdgeExtend())");
     PROFILE_FUNCTION(result_tex = resample(tex, 1.1, 1.1, tex.width() * 1.1, tex.height() * 1.1, BicubicInterpolation(), ZeroEdgeExtend()),
    	     result_img = resample(img, 1.1, 1.1, tex.width() * 1.1, tex.height() * 1.1, BicubicInterpolation(), ZeroEdgeExtend()),
    	     "resample(tex, 1.1, 1.1, tex.width() * 1.1, tex.height() * 1.1, interpolation::Bicubic(), ZeroEdgeExtend())");
    */
    }

//#################################################################################################################
//                                            CXXTest Class: TestImageOperators
//#################################################################################################################



class TestImageOperators : public CxxTest::TestSuite
{
public:
  void test_general() {
    gpu_init();
    set_shader_language_choice(SHADER_LANGUAGE_CHOICE_GLSL); // TEMP
   printf("\n");
    int aaa = sizeof(UtilityTimer);
    UtilityTimer timer;
    GPUImage<PixelRGB<float> > tex(1000, 1000);
    read_image(tex, "tests/test_images/lighthouse-1000x1000.png");
    ImageView<PixelRGB<float> > img(1000, 1000);
    // *********** Profile Allocation / Compilation / Transfer, etc. **************
    // Allocation
    TexAlloc::set_recycling(false);
    GPUImage<PixelRGB<float> > img_alloc_test_small(100, 100);
    glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, GL_COLOR_ATTACHMENT0_EXT, img_alloc_test_small.target(), img_alloc_test_small.name(), 0);

    timer.Start();
    GPUImage<PixelRGB<float> > img_alloc_test(1000, 1000);
    glFinish(); timer.Stop();
    float time_new_tex_allocation = timer.ElapsedSeconds();

    timer.Start();
    glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, GL_COLOR_ATTACHMENT0_EXT, img_alloc_test.target(), img_alloc_test.name(), 0);
    glFinish(); timer.Stop();
    float time_new_tex_binding = timer.ElapsedSeconds();

    glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, GL_COLOR_ATTACHMENT0_EXT, img_alloc_test.target(), 0, 0);

    timer.Start();
    glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, GL_COLOR_ATTACHMENT0_EXT, img_alloc_test.target(), img_alloc_test.name(), 0);
    glFinish(); timer.Stop();
    float time_old_tex_binding = timer.ElapsedSeconds();

    printf("&New Texture Allocation Time: %f\n*New Texture Binding Time: %f\n, Old Texture Binding Time: %f\n\n", time_new_tex_allocation, time_new_tex_binding, time_old_tex_binding);

    // Compilation + Execution
    tex - 1.0;
    TexAlloc::set_recycling(true);
    delete (new GPUImage<PixelRGB<float> >(1000, 1000));
    timer.Start();
    tex + 1.0;
    timer.Stop();
    float time_comp_exec = timer.ElapsedSeconds();
    // Transfers
    tex = img; glFinish();
    timer.Start();
    tex = img;
    timer.Stop();  float time_transfer_to_gpu = timer.ElapsedSeconds();

    tex.write_image_view(img); glFinish();
    timer.Start();
    tex.write_image_view(img);
    timer.Stop();  float time_transfer_to_cpu = timer.ElapsedSeconds();
    printf("Transfer to GPU: %f\n, Transfer to cpu: %f\n", time_transfer_to_gpu, time_transfer_to_cpu);

    GPUImage<PixelRGB<float> > test(1000, 1000);
    // Execution
    timer.Start();
    tex + 1.0;
    timer.Stop();
    float time_exec = timer.ElapsedSeconds();
    // Allocation+ Execution
    TexAlloc::set_recycling(false);
    timer.Start();
    tex + 1.0;
    timer.Stop();
    float time_alloc_exec = timer.ElapsedSeconds();
  }

  void test_profile() {
    gpu_init();
    TexAlloc::set_recycling(true);
     printf("\n--- PixelRGB<float> ---\n");
     profile_functions<PixelRGB<float> >(NULL);
     //printf("\n--- PixelRGB<float16> [%i x %i] ---\n", 1000, 1000);
     //profile_functions<PixelRGB<float16> >("tests/Result_RGB_float16");
     //  printf("\n--- PixelRGB<uint8> [%i x %i] ---\n", 1000, 1000);
     //profile_functions<PixelRGB<uint8> >("tests/Result_RGB_uint8");
  }




};

