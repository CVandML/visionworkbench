// __BEGIN_LICENSE__
//  Copyright (c) 2006-2013, United States Government as represented by the
//  Administrator of the National Aeronautics and Space Administration. All
//  rights reserved.
//
//  The NASA Vision Workbench is licensed under the Apache License,
//  Version 2.0 (the "License"); you may not use this file except in
//  compliance with the License. You may obtain a copy of the License at
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
// __END_LICENSE__


// TestImageMath.h
#include <cxxtest/TestSuite.h>

#include <vw/GPU.h>

using namespace std;
using namespace vw;
using namespace GPU;


class TestImageMath : public CxxTest::TestSuite
{
 public:

  void init() {
    gpu_init();
  }


#define TEST_UNARY_MATH_FUNCTION(func,arg,result)                       \
	{								\
	gpu_init();						        \
	PixelRGBA<float> arg_pixel(arg, arg, arg, arg);			\
	PixelRGBA<float> im_pixel;					\
        GPUImage<PixelRGBA<float> > im(1,1);				\
	im.pixel(0, 0) = arg_pixel;				        \
	im_pixel = func(im)(0,0);					\
        TS_ASSERT_DELTA(im_pixel.r(), result, 0.00025);		        \
        TS_ASSERT_DELTA(im_pixel.g(), result, 0.00025);			\
        TS_ASSERT_DELTA(im_pixel.b(), result, 0.00025);			\
        TS_ASSERT_DELTA(im_pixel.a(), result, 0.00025);			\
	}


#define TEST_BINARY_MATH_FUNCTION(func,arg1,arg2,result)                \
  {									\
    gpu_init();	                  					\
    GPUImage<PixelRGBA<float> > im1(1,1);				\
    im1.pixel(0, 0) = PixelRGBA<float>(arg1, arg1, arg1, arg1);	        \
    GPUImage<PixelRGBA<float> > im2(1,1);				\
    im2.pixel(0, 0) = PixelRGBA<float>(arg2, arg2, arg2, arg2);	        \
    PixelRGBA<float> im_pixel;					        \
    im_pixel = func(im1, im2)(0,0);					\
    TS_ASSERT_DELTA(im_pixel.r(), result, 0.00025);			\
    im_pixel = func(arg1, im2)(0,0); 			                \
    TS_ASSERT_DELTA(im_pixel.r(), result, 0.00025); 			\
    im_pixel = func(im1, arg2)(0,0);				        \
    TS_ASSERT_DELTA(im_pixel.r(), result, 0.00025);			\
  }

  void test_acos() { TEST_UNARY_MATH_FUNCTION(acos,0.5,1.0472); }
  void test_asin() { TEST_UNARY_MATH_FUNCTION(asin,0.5,0.523599); }
  void test_atan() { TEST_UNARY_MATH_FUNCTION(atan,1.0,0.785398); }
  void test_cos() { TEST_UNARY_MATH_FUNCTION(cos,1.0,0.540302); }
  void test_sin() { TEST_UNARY_MATH_FUNCTION(sin,1.0,0.841471); }
  void test_tan() { TEST_UNARY_MATH_FUNCTION(tan,1.0,1.55741); }
  void test_cosh() { TEST_UNARY_MATH_FUNCTION(cosh,1.0,1.54308); }
  void test_sinh() { TEST_UNARY_MATH_FUNCTION(sinh,1.0,1.1752); }
  void test_tanh() { TEST_UNARY_MATH_FUNCTION(tanh,1.0,0.761594); }
  void test_exp() { TEST_UNARY_MATH_FUNCTION(exp,1.0,2.718281); }
  void test_log() { TEST_UNARY_MATH_FUNCTION(log,2.0,0.693147); }
  void test_log10() { TEST_UNARY_MATH_FUNCTION(log10,2.0,0.30103); }
  void test_sqrt() { TEST_UNARY_MATH_FUNCTION(sqrt,2.0,1.41421); }
  void test_ceil() { TEST_UNARY_MATH_FUNCTION(ceil,1.5,2.0);
                     TEST_UNARY_MATH_FUNCTION(ceil,-1.5,-1.0); }
  void test_floor() { TEST_UNARY_MATH_FUNCTION(floor,1.5,1.0);
                      TEST_UNARY_MATH_FUNCTION(floor,-1.5,-2.0); }
  void test_atan2() { TEST_BINARY_MATH_FUNCTION(atan2,2.0,1.0,1.10715); }
  void test_atan2_neg_x() { TEST_BINARY_MATH_FUNCTION(atan2,-2.0,-1.0,-2.03444); }
  void test_atan2_zero_x() { TEST_BINARY_MATH_FUNCTION(atan2, -1.0,0.0,-1.57080); }
  void test_pow() { TEST_BINARY_MATH_FUNCTION(pow,3.0,2.0,9.0); }

#ifndef WIN32
  void test_acosh() { TEST_UNARY_MATH_FUNCTION(acosh,1.5,0.962424); }
  void test_asinh() { TEST_UNARY_MATH_FUNCTION(asinh,1.0,0.881374); }
  void test_atanh() { TEST_UNARY_MATH_FUNCTION(atanh,0.5,0.549306); }
  void test_exp2() { TEST_UNARY_MATH_FUNCTION(exp2,1.0,2.0); }
  void test_expm1() { TEST_UNARY_MATH_FUNCTION(expm1,1.0,1.718281); }
  void test_log2() { TEST_UNARY_MATH_FUNCTION(log2,2.0,1.0); }
  void test_log1p() { TEST_UNARY_MATH_FUNCTION(log1p,1.0,0.693147); }
  void test_cbrt() { TEST_UNARY_MATH_FUNCTION(cbrt,2.0,1.25992); }
  void test_hypot() { TEST_BINARY_MATH_FUNCTION(hypot,2.0,1.0,2.23607); }
  void test_copysign() { TEST_BINARY_MATH_FUNCTION(copysign,3.0,-2.0,-3.0);
  TEST_BINARY_MATH_FUNCTION(copysign,3.0,2.0,3.0); }
  void test_fdim() { TEST_BINARY_MATH_FUNCTION(fdim,3.0,2.0,1.0);
  TEST_BINARY_MATH_FUNCTION(fdim,2.0,3.0,0.0); }
  void test_round() { TEST_UNARY_MATH_FUNCTION(round,1.4,1.0);
  TEST_UNARY_MATH_FUNCTION(round,1.5,2.0); }
  void test_trunc() { TEST_UNARY_MATH_FUNCTION(trunc,1.5,1.0);
  TEST_UNARY_MATH_FUNCTION(trunc,-1.5,-1.0); }

#if(0)
  //void test_erf() { TEST_UNARY_MATH_FUNCTION(erf,1.0,0.842701); }
  //void test_erfc() { TEST_UNARY_MATH_FUNCTION(erfc,1.0,0.157299); }
  //void test_tgamma() { TEST_UNARY_MATH_FUNCTION(tgamma,1.5,0.886227); }
  //void test_lgamma() { TEST_UNARY_MATH_FUNCTION(lgamma,2.5,0.284683); }
#endif

#endif

  // Image Operators
  void test_operator_add() { TEST_BINARY_MATH_FUNCTION(operator+,1.0,2.0,3.0); }
  void test_operator_subtract() { TEST_BINARY_MATH_FUNCTION(operator-,5.0,3.0,2.0); }
  void test_operator_multiply() { TEST_BINARY_MATH_FUNCTION(operator*,3.0,4.0,12.0); }
  void test_operator_divide() { TEST_BINARY_MATH_FUNCTION(operator/,6.0,3.0,2.0); }



}; // class TestImageMath
