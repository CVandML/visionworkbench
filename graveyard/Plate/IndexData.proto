// __BEGIN_LICENSE__
//  Copyright (c) 2006-2013, United States Government as represented by the
//  Administrator of the National Aeronautics and Space Administration. All
//  rights reserved.
//
//  The NASA Vision Workbench is licensed under the Apache License,
//  Version 2.0 (the "License"); you may not use this file except in
//  compliance with the License. You may obtain a copy of the License at
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
// __END_LICENSE__


package vw.platefile;

// The TileRecord store metadata about the tile itself as well as the
// information needed to place the tile back into the index tree.  The
// [col, row, level, transaction_id] info can be used to reconstruct the index
// by reading TileRecords in the blob files.
message TileHeader {
  required uint32 col = 5;
  required uint32 row = 6;
  required uint32 level = 7;
  required uint32 transaction_id = 8;
  optional string filetype = 10 [default = 'unknown'];
}

message IndexHeader {
  required uint32 tile_size = 2;     // tile width/heigh in pixels
  required string tile_filetype = 3; // file type [e.g. tif, png, or jpg]
  required int32 pixel_format = 4;   // see vw/Image/PixelTypeInfo.h
  required int32 channel_type = 5;   // see vw/Image/PixelTypeInfo.h
  required string type = 6;          // platefile type [ toast, kml, or gigapan ]
  optional string description = 7 [default = ""];   // textual description

  // These are private and should be considered read-only
  optional uint32 platefile_id = 1;  // a unique number that identifies this platefile
  optional uint32 num_levels = 8;     // number of pyramid levels
  optional uint32 version = 10 [default = 1];
  optional uint32 transaction_read_cursor = 11 [default = 0];
  optional uint32 transaction_write_cursor = 12 [default = 0];
}
